'''
1. 既然内容相似度计算简单，能频繁更新，为什么还需要协同过滤算法呢？
内容在生产出来后标签属性就定了，就算是频繁更新，这还是一种偏“静态”的算法，没有很好的利用用户的行为数据。协同过滤算法通过用户行为数据，找到与你相似的用户，
通过他们的行为和他们喜欢的内容进行推荐。协同过滤算法更为“动态”，反馈更为及时。
2. 你需要推荐系统么？哪些情况下不需要推荐系统？
当用户和用户行为数据在量和维度上有了一定积累后再部署推荐系统比较好。创业公司项目刚启动时，暂时不需要推荐系统，可以用content-based Filtering进行冷启动。
3. 如果给一个视频打标签，视频中有音乐作为背景音乐，采用了NLP方式对内容自动打标签，可能存在什么问题？
用NLP的方式对背景音乐进行自动打标签，这样获取的标签是针对背景音乐的，并不是视频内容本身，这样获取的标签和视频内容相关性不高。
'''


#使用cart进行MNIST手写数字分类
from sklearn import tree
import numpy as np
from sklearn.datasets import load_digits
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.metrics import accuracy_score

#加载数据
digits = load_digits()
data = digits.data

#数据探索
print(data.shape)

#查看第一幅图像
print(digits.images[0])

#第一幅图像代表的数字含义
print(digits.target[0])

#将第一幅图像显示出来
plt.gray()
plt.imshow(digits.images[0])
plt.show()

#分割数据，将25%的数据作为测试集，其余作为训练集
train_x, test_x, train_y, test_y = train_test_split(data, digits.target, test_size=0.25, random_state=33)

#采用Z-Score规范化
ss = preprocessing.StandardScaler()
train_ss_x = ss.fit_transform(train_x)
test_ss_x = ss.transform(test_x)

# 创建cart分类器
clf = tree.DecisionTreeClassifier()
#拟合
clf.fit(train_ss_x, train_y)
#预测
predict_y = clf.predict(test_ss_x)
print('CART准确率：%0.4lf' % accuracy_score(predict_y, test_y))
